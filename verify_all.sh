#!/bin/bash

# Script de v√©rification compl√®te de l'application LSU
# Usage: ./verify_all.sh

echo "üîç V√âRIFICATION COMPL√àTE DE L'APPLICATION LSU"
echo "==============================================="
echo "Date: $(date)"
echo ""

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les r√©sultats
print_result() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $2${NC}"
        return 1
    fi
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# Compteurs de r√©sultats
TOTAL_TESTS=0
PASSED_TESTS=0

# TEST 1: V√©rification Docker
echo -e "${BLUE}üì¶ V√âRIFICATION DOCKER${NC}"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
TOTAL_TESTS=$((TOTAL_TESTS + 1))
if docker --version >/dev/null 2>&1; then
    print_result 0 "Docker install√© et accessible"
    PASSED_TESTS=$((PASSED_TESTS + 1))
else
    print_result 1 "Docker non accessible"
fi

# TEST 2: V√©rification Ollama
echo ""
echo -e "${BLUE}ü§ñ V√âRIFICATION OLLAMA${NC}"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

# Conteneur Ollama
TOTAL_TESTS=$((TOTAL_TESTS + 1))
if docker ps | grep -q ollama; then
    print_result 0 "Conteneur Ollama en cours d'ex√©cution"
    PASSED_TESTS=$((PASSED_TESTS + 1))
else
    print_result 1 "Conteneur Ollama non trouv√©"
fi

# Port Ollama
TOTAL_TESTS=$((TOTAL_TESTS + 1))
if netstat -an 2>/dev/null | grep -q :11434; then
    print_result 0 "Port 11434 ouvert"
    PASSED_TESTS=$((PASSED_TESTS + 1))
else
    print_result 1 "Port 11434 non accessible"
fi

# API Ollama
TOTAL_TESTS=$((TOTAL_TESTS + 1))
if curl -s --max-time 5 http://localhost:11434/api/version >/dev/null; then
    print_result 0 "API Ollama r√©pond"
    PASSED_TESTS=$((PASSED_TESTS + 1))
else
    print_result 1 "API Ollama ne r√©pond pas"
fi

# TEST 3: V√©rification N8N
echo ""
echo -e "${BLUE}üîó V√âRIFICATION N8N${NC}"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

# Conteneur N8N
TOTAL_TESTS=$((TOTAL_TESTS + 1))
if docker ps | grep -q n8n; then
    print_result 0 "Conteneur N8N en cours d'ex√©cution"
    PASSED_TESTS=$((PASSED_TESTS + 1))
else
    print_result 1 "Conteneur N8N non trouv√©"
fi

# Port N8N
TOTAL_TESTS=$((TOTAL_TESTS + 1))
if netstat -an 2>/dev/null | grep -q :5678; then
    print_result 0 "Port 5678 ouvert"
    PASSED_TESTS=$((PASSED_TESTS + 1))
else
    print_result 1 "Port 5678 non accessible"
fi

# Interface N8N
TOTAL_TESTS=$((TOTAL_TESTS + 1))
if curl -s --max-time 5 -I http://localhost:5678 | grep -q "200"; then
    print_result 0 "Interface N8N accessible"
    PASSED_TESTS=$((PASSED_TESTS + 1))
else
    print_result 1 "Interface N8N non accessible"
fi

# TEST 4: V√©rification Application Web
echo ""
echo -e "${BLUE}üåê V√âRIFICATION APPLICATION WEB${NC}"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

# Fichier index.html
TOTAL_TESTS=$((TOTAL_TESTS + 1))
if [ -f "index.html" ]; then
    print_result 0 "Fichier index.html trouv√©"
    PASSED_TESTS=$((PASSED_TESTS + 1))
else
    print_result 1 "Fichier index.html non trouv√©"
fi

# Serveur web (optionnel)
TOTAL_TESTS=$((TOTAL_TESTS + 1))
if netstat -an 2>/dev/null | grep -q :8000; then
    print_result 0 "Serveur web actif sur le port 8000"
    PASSED_TESTS=$((PASSED_TESTS + 1))
else
    print_warning "Aucun serveur sur le port 8000 (vous pouvez ouvrir index.html directement)"
    PASSED_TESTS=$((PASSED_TESTS + 1))  # Consid√©r√© comme OK
fi

# TEST 5: Test du webhook
echo ""
echo -e "${BLUE}ü™ù TEST DU WEBHOOK${NC}"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

TOTAL_TESTS=$((TOTAL_TESTS + 1))
WEBHOOK_RESPONSE=$(curl -s --max-time 10 -X POST http://localhost:5678/webhook-test/generer-commentaire \
  -H "Content-Type: application/json" \
  -d '{"prenom":"Test","classe":"CE1","matiere":"Test","competences":"Test","remarques":"Test"}' 2>/dev/null)

if echo "$WEBHOOK_RESPONSE" | grep -q -i "test\|commentaire\|ce1\|√©l√®ve" 2>/dev/null; then
    print_result 0 "Webhook fonctionnel (g√©n√©ration OK)"
    PASSED_TESTS=$((PASSED_TESTS + 1))
else
    if curl -s --max-time 5 http://localhost:5678/webhook-test/generer-commentaire >/dev/null 2>&1; then
        print_result 1 "Webhook accessible mais g√©n√©ration √©chou√©e"
    else
        print_result 1 "Webhook non configur√© ou N8N non accessible"
    fi
fi

# R√âSUM√â FINAL
echo ""
echo "üéØ R√âSUM√â DES V√âRIFICATIONS"
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
echo -e "Tests r√©ussis: ${GREEN}$PASSED_TESTS${NC}/$TOTAL_TESTS"

if [ $PASSED_TESTS -eq $TOTAL_TESTS ]; then
    echo -e "${GREEN}üéâ Tous les tests sont pass√©s ! Votre application est op√©rationnelle.${NC}"
    echo ""
    echo "üöÄ LIENS D'ACC√àS:"
    echo "üì± Application: http://localhost:8000 (ou ouvrir index.html)"
    echo "üîó N8N: http://localhost:5678"
    echo "ü§ñ Ollama API: http://localhost:11434"
    
    echo ""
    echo "üìã √âTAPES SUIVANTES:"
    echo "1. Ouvrir l'application web"
    echo "2. Tester la connexion Ollama dans l'interface"
    echo "3. S√©lectionner un √©l√®ve et faire une √©valuation"
    echo "4. G√©n√©rer un commentaire"
    
elif [ $PASSED_TESTS -gt $((TOTAL_TESTS / 2)) ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  La plupart des composants fonctionnent, mais il y a quelques probl√®mes √† r√©soudre.${NC}"
    
    echo ""
    echo "üîß ACTIONS RECOMMAND√âES:"
    if ! docker ps | grep -q ollama; then
        echo "‚Ä¢ D√©marrer Ollama: docker run -d -p 11434:11434 --name ollama-lsu ollama/ollama"
    fi
    if ! docker ps | grep -q n8n; then
        echo "‚Ä¢ D√©marrer N8N: docker run -d -p 5678:5678 --name n8n-workflow n8nio/n8n"
    fi
    if ! curl -s --max-time 5 http://localhost:5678/webhook-test/generer-commentaire >/dev/null 2>&1; then
        echo "‚Ä¢ Configurer le webhook dans N8N (voir instructions pr√©c√©dentes)"
    fi
    
else
    echo -e "${RED}‚ùå Plusieurs composants ne fonctionnent pas. V√©rifiez votre installation.${NC}"
    
    echo ""
    echo "üÜò D√âPANNAGE:"
    echo "1. V√©rifiez que Docker Desktop est d√©marr√©"
    echo "2. Red√©marrez les conteneurs si n√©cessaire"
    echo "3. V√©rifiez les logs: docker logs ollama-lsu && docker logs n8n-workflow"
    echo "4. Relancez le script de d√©marrage"
fi

echo ""
echo "üìû Pour un diagnostic d√©taill√©, ex√©cutez les scripts individuels."
